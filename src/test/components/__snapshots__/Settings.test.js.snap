// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should render Settings component correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Unknown />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Modal
        ariaHideApp={false}
        bodyOpenClassName="ReactModal__Body--open"
        className="Modal"
        closeTimeoutMS={0}
        contentLabel="Settings"
        isOpen={false}
        onRequestClose={[Function]}
        overlayClassName="Overlay"
        parentSelector={[Function]}
        portalClassName="ReactModalPortal"
        shouldCloseOnEsc={true}
        shouldCloseOnOverlayClick={true}
        shouldFocusAfterRender={true}
        shouldReturnFocusAfterClose={true}
>
        <Connect(Component) />
</Modal>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "ariaHideApp": false,
        "bodyOpenClassName": "ReactModal__Body--open",
        "children": <Connect(Component) />,
        "className": "Modal",
        "closeTimeoutMS": 0,
        "contentLabel": "Settings",
        "isOpen": false,
        "onRequestClose": [Function],
        "overlayClassName": "Overlay",
        "parentSelector": [Function],
        "portalClassName": "ReactModalPortal",
        "shouldCloseOnEsc": true,
        "shouldCloseOnOverlayClick": true,
        "shouldFocusAfterRender": true,
        "shouldReturnFocusAfterClose": true,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Modal
          ariaHideApp={false}
          bodyOpenClassName="ReactModal__Body--open"
          className="Modal"
          closeTimeoutMS={0}
          contentLabel="Settings"
          isOpen={false}
          onRequestClose={[Function]}
          overlayClassName="Overlay"
          parentSelector={[Function]}
          portalClassName="ReactModalPortal"
          shouldCloseOnEsc={true}
          shouldCloseOnOverlayClick={true}
          shouldFocusAfterRender={true}
          shouldReturnFocusAfterClose={true}
>
          <Connect(Component) />
</Modal>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "ariaHideApp": false,
          "bodyOpenClassName": "ReactModal__Body--open",
          "children": <Connect(Component) />,
          "className": "Modal",
          "closeTimeoutMS": 0,
          "contentLabel": "Settings",
          "isOpen": false,
          "onRequestClose": [Function],
          "overlayClassName": "Overlay",
          "parentSelector": [Function],
          "portalClassName": "ReactModalPortal",
          "shouldCloseOnEsc": true,
          "shouldCloseOnOverlayClick": true,
          "shouldFocusAfterRender": true,
          "shouldReturnFocusAfterClose": true,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
